print((lambda f: lambda *a: f(f,*a))(lambda rec, board, player: [print('\n\nThis is the current board state:\n'+'\n'.join([' '.join(map(lambda x: ['X','O','-'][x],board[3*i:3*(i+1)])) for i in range(3)])), 'Game over.' if (True if any([(board[3*i] != -1 and board[3*i] == board[3*i+1] == board[3*i+2]) or (board[i] != -1 and board[i] == board[3+i] == board[6+i]) for i in range(3)]) or (board[0] != -1 and board[0] == board[4] == board[8]) or (board[2] != -1 and board[2] == board[4] == board[6]) else -1 not in board) else rec(rec, (lambda l, i, val: [val] + l[1:] if i == 0 else l[:-1]+[val] if i == len(l)-1 else l[:i]+[val]+l[i+1:])(board, (lambda board: (lambda f: lambda a: f(f, a))(lambda rec, move: [print('Invalid move.'), rec(rec, int(input("\nChoose your move: ")))][1] if (move < 0 or move > 8) or (board[move] != -1) else move)(int(input("\nChoose your move: "))))(board), player := not player), player)][1])([-1, -1, -1, -1, -1, -1, -1, -1, -1], 1))